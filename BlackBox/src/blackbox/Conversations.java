package blackbox;

import javax.swing.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;


public class Conversations extends javax.swing.JFrame {

    private Client client;
    private String clientUsername;
    private Set<String> currentUsers;
    protected LinkedHashMap<String, MessagePanel> activeChats; // LRU Map for managing recent panels
    protected MessagePanel activeMessagePanel;
    private final int MAX_CHAT_PANELS = 5; // Limit for active panels
    
    public Conversations(Client client, String clientUsername) {
        this.client = client;
        this.currentUsers = new HashSet<>();
        this.activeChats = new LinkedHashMap<>(MAX_CHAT_PANELS, 0.75f, true) {
            @Override
            protected boolean removeEldestEntry(Map.Entry<String, MessagePanel> eldest) {
                // Automatically remove the oldest panel when the size exceeds MAX_CHAT_PANELS
                if (size() > MAX_CHAT_PANELS) {
                    MessagingPanel.remove(eldest.getValue());
                    return true;
                }
                return false;
            }
        };
        this.clientUsername = clientUsername;

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                client.disconnect(); // Notify server and close connection
            }
        });

        initComponents();
        initializeUserList();

        // Double-click listener to open chat with selected user
        ActiveUsersList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                String selectedUser = ActiveUsersList.getSelectedValue();
                if (selectedUser != null) {
                    String recipientUsername = selectedUser.replace(":Online", "").trim();
                    openMessagingWindow(recipientUsername, clientUsername); // Pass recipient and client username
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        MessageListPanel = new javax.swing.JPanel();
        small_logo = new javax.swing.JLabel();
        UsersAvailableToChatPane = new javax.swing.JScrollPane();
        ActiveUsersList = new javax.swing.JList<>();
        MessagingPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        MessageListPanel.setBackground(new java.awt.Color(0, 0, 0));
        MessageListPanel.setPreferredSize(new java.awt.Dimension(400, 500));
        MessageListPanel.setLayout(new java.awt.BorderLayout());

        small_logo.setFont(new java.awt.Font("Calibri Light", 1, 36)); // NOI18N
        small_logo.setForeground(new java.awt.Color(255, 255, 255));
        small_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/blackbox_logo_small.png"))); // NOI18N
        small_logo.setText("Conversations");
        small_logo.setIconTextGap(0);
        small_logo.setPreferredSize(new java.awt.Dimension(75, 75));
        MessageListPanel.add(small_logo, java.awt.BorderLayout.PAGE_START);

        UsersAvailableToChatPane.setBackground(new java.awt.Color(0, 0, 0));

        ActiveUsersList.setBackground(new java.awt.Color(0, 0, 0));
        ActiveUsersList.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 10, 10, 0));
        ActiveUsersList.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        ActiveUsersList.setForeground(new java.awt.Color(255, 255, 255));
        ActiveUsersList.setToolTipText("");
        UsersAvailableToChatPane.setViewportView(ActiveUsersList);

        MessageListPanel.add(UsersAvailableToChatPane, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.ipady = 409;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(MessageListPanel, gridBagConstraints);

        MessagingPanel.setBackground(new java.awt.Color(53, 57, 62));
        MessagingPanel.setPreferredSize(new java.awt.Dimension(400, 500));
        MessagingPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 399;
        gridBagConstraints.ipady = 499;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(MessagingPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initializeUserList() {
        currentUsers = new HashSet<>();
    }
    
protected void openMessagingWindow(String recipientUsername, String clientUsername) {
    if (!activeChats.containsKey(recipientUsername)) {
        // Create and store new MessagePanel
        MessagePanel newMessagePanel = new MessagePanel(client, recipientUsername);
        activeChats.put(recipientUsername, newMessagePanel);

        // GridBagConstraints to manage layout
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;

        MessagingPanel.add(newMessagePanel, gbc);
        MessagingPanel.revalidate();
        MessagingPanel.repaint();
    }

    // Hide all panels except the active one
    for (Map.Entry<String, MessagePanel> entry : activeChats.entrySet()) {
        entry.getValue().setVisible(entry.getKey().equals(recipientUsername));
    }

    activeMessagePanel = activeChats.get(recipientUsername);
    // Ensure active panel is visible
    for (Component component : MessagingPanel.getComponents()) {
        component.setVisible(false);
    }
    activeMessagePanel.setVisible(true);
}




    // Update the active users list in the UI
    public void updateConversationsPage(String[] activeUsers) {
        System.out.println("Updating active users list: " + Arrays.toString(activeUsers));
        DefaultListModel<String> model = new DefaultListModel<>();
        for (String user : activeUsers) {
            model.addElement(user);
        }
        ActiveUsersList.setModel(model);
    }
    
    public MessagePanel getMessagePanel(String recipientUsername) {
        return activeChats.get(recipientUsername);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ActiveUsersList;
    private javax.swing.JPanel MessageListPanel;
    private javax.swing.JPanel MessagingPanel;
    private javax.swing.JScrollPane UsersAvailableToChatPane;
    private javax.swing.JLabel small_logo;
    // End of variables declaration//GEN-END:variables
}
